version: v1beta11

dependencies:
  - name: k3d
    source:
      git: https://github.com/edgefarm/devspace.base
      subPath: /environments/k3d
      branch: ingress-nginx

  - name: sealed-secrets
    source:
      git: https://github.com/edgefarm/devspace.base
      subPath: /environments/sealed-secrets
      branch: ingress-nginx

vars:
  - name: HOST_IP
    question: What is the IP address of your host?
    default: "127.0.0.1"
  - name: HOST_IP_NIP_IO
    command: echo $(echo ${HOST_IP} | xargs).nip.io
  - name: NUMBER_OF_VIRTUAL_DEVICES
    value: 4

commands:
  - name: init
    command: |-
      devspace run update
      devspace run k3d.init
      devspace run sealed-secrets.init
      devspace run generate-kubeedge-certs

  - name: purge
    command: |-
      devspace run k3d.purge
      devspace run purge-nodes

  - name: activate
    command: |-
      devspace run k3d.activate

  - name: update
    command: |-
      devspace update dependencies

  - name: generate-kubeedge-certs
    command: |-
      echo ${HOST_IP_NIP_IO}
      hack/generate-kubeedge-certs.sh genCSR dev/manifests/kubeedge-certs/config/ /CN=kubeedge server ${HOST_IP_NIP_IO}
      hack/generate-kubeedge-certs.sh genCert dev/manifests/kubeedge-certs/config/rootCa.pem dev/manifests/kubeedge-certs/config/rootCa.key dev/manifests/kubeedge-certs/config/ server ${HOST_IP_NIP_IO}
      hack/generate-kubeedge-certs.sh genCSR dev/manifests/kubeedge-certs/config/ /CN=node node ${HOST_IP_NIP_IO}
      hack/generate-kubeedge-certs.sh genCert dev/manifests/kubeedge-certs/config/rootCa.pem dev/manifests/kubeedge-certs/config/rootCa.key dev/manifests/kubeedge-certs/config/ node ${HOST_IP_NIP_IO}
      rm -f dev/manifests/kubeedge-certs/config/*.csr || true
      rm -f dev/manifests/kubeedge-certs/config/*.srl || true

  - name: instantiate-nodes
    command: |-
      hack/build-kubeedge-node.sh
      for i in $(seq ${NUMBER_OF_VIRTUAL_DEVICES}); do
        hack/instantiate-kubeedge-node.sh ${HOST_IP_NIP_IO} node$i
      done

  - name: purge-nodes
    command: |-
      for i in $(seq ${NUMBER_OF_VIRTUAL_DEVICES}); do
        docker kill node$i
        kubectl delete nodes node$i
      done

deployments:
  - name: argocd
    kubectl:
      kustomize: true
      manifests:
        - ./manifests/edgefarm.core/argocd
    namespace: argocd

  - name: keycloak
    kubectl:
      manifests:
        - ./manifests/edgefarm.core/keycloak
    namespace: my-keycloak-operator

  - name: kubeedge
    namespace: kubeedge
    helm:
      chart:
        name: charts/kubeedge
      values:
        cloudHub:
          dnsNames:
            - ${HOST_IP_NIP_IO}

  - name: kubeedge-certs
    namespace: kubeedge
    kubectl:
      kustomize: true
      manifests:
        - dev/manifests/kubeedge-certs/

  # - name: mixed-app-network
  #   namespace: mixed-app-network
  #   kubectl:
  #     kustomize: true
  #     manifests:
  #       - dev/applications/mixed-app-network/

hooks:
  - name: "install-operator-lifecycle-manager"
    command: |-
      curl -L https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.19.1/install.sh | bash -s -- v0.18.3 || true # ignore error's
    os: darwin,linux
    events:
      - "before:deploy"

  - name: "install-core-operators"
    command: |-
      kubectl apply -k manifests/edgefarm.core/operators
    os: darwin,linux
    events:
      - "before:deploy"

    # wait crd established
  - command: |-
      until kubectl wait --for=condition=established crd/certificates.cert-manager.io --timeout=60s; do sleep 2; done
      until kubectl wait --for=condition=established crd/applications.argoproj.io --timeout=60s; do sleep 2; done
      until kubectl wait --for=condition=established crd/keycloaks.keycloak.org --timeout=60s; do sleep 2; done
    os: darwin,linux
    events:
      - "before:deploy"

  - name: install-network-operators
    command: |-
      kubectl kustomize --enable-helm=true manifests/edgefarm.network | kubectl apply -f -
    os: darwin,linux
    events:
      - "after:deploy"

  - name: install-applications-operators
    command: |-
      kubectl kustomize --enable-helm=true manifests/edgefarm.applications/operators | kubectl apply -f -
    os: darwin,linux
    events:
      - "after:deploy"

    # wait crd established
  - command: |-
      until kubectl wait --for=condition=established crd/applications.core.oam.dev --timeout=60s; do sleep 2; done
    os: darwin,linux
    events:
      - "after:deploy"

  - name: install-applications-kubevela
    command: |-
      kubectl kustomize --enable-helm=true manifests/edgefarm.applications/kubevela | kubectl apply -f -
    os: darwin,linux
    events:
      - "after:deploy"
